#!/usr/bin/env node --harmony

'use strict'
const co = require('co')
const inquirer = require('inquirer')
const config = require('../templates')
const chalk = require('chalk')
const fs = require('fs')
const ora = require('ora')

console.log()
process.on('exit', ()=>{
  console.log()
})

let spinner = ora('dots').start('已经进入了...')
setTimeout(() => {
    spinner.color = 'yellow';
    spinner.text = 'Loading rainbows';
}, 1000);
setTimeout(() => {
    
  spinner.succeed("11");
}, 2000);
const init= () => {
  co(function *() {
    // 分步接收用户输入的参数
    let questions = [{
      type: "list",
      message: "Vue build",
      choices: [
        {
          name: "Runtime + Compiler: recommended for most users",
          value: "standalone",
          short: "standalone"
        },
        {
          name: "Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specific HTML) are ONLY allowed in .vue files - render functions are required elsewhere",
          value: "runtime",
          short: "runtime"
        }
      ]},{ 
      type: "checkbox", 
      name: "selection", 
      message: "select fruits", 
      choices: [{ 
          name: "apple"
        },{ 
          name: "banana" 
        },{ 
          name: "melon" 
        }] 
      },{ 
        type: "string", 
        name: "description", 
        required: false, 
        message: "Project description", 
        default: "A Vue.js project" 
      },{ 
        name: "author", 
        type: "string", 
        message: "Author"
      }];
    inquirer.prompt(questions, function(answers) {
      console.log(answers.selection);
      let tplName = "yield prompt('Template name: ')"
      let gitUrl = "yield prompt('Git https link: ')"
      let branch = "yield prompt('Branch: ')"
      
      // 避免重复添加
      if (!config.tpl[tplName]) {
        config.tpl[tplName] = {}
        config.tpl[tplName]['url'] = gitUrl.replace(/[\u0000-\u0019]/g, '') // 过滤unicode字符
        config.tpl[tplName]['branch'] = branch
      } else {
        console.log(chalk.red('Template has already existed!'))
        process.exit()
      }
      
      // 把模板信息写入templates.json
      fs.writeFile(__dirname + '/../templates.json', JSON.stringify(config), 'utf-8', (err) => {
        if (err) console.log(err)
        console.log(chalk.green('New template added!\n'))
        console.log(chalk.grey('The last template list is: \n'))
        console.log(config)
        console.log('\n')
        process.exit()
      })
    })
  })
}
module.exports = init();